{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getAllPostIds, getPostData } from '../utils/getPosts';\nimport API_URL from \"../utils/http-utils\";\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nvar Posts = function Posts(props) {\n  console.log('#######', props);\n  return 'Hello'; // const [isLoading, setLoading] = useState(false); //State for the loading indicator\n  // const startLoading = () => setLoading(true);\n  // const stopLoading = () => setLoading(false);\n  //\n  // useEffect(() => { //After the component is mounted set router event handlers\n  //     Router.events.on('routeChangeStart', startLoading);\n  //     Router.events.on('routeChangeComplete', stopLoading);\n  //\n  //     return () => {\n  //         Router.events.off('routeChangeStart', startLoading);\n  //         Router.events.off('routeChangeComplete', stopLoading);\n  //     }\n  // }, [])\n  //\n  // const pagginationHandler = (page) => {\n  //     const currentPath = props.router.pathname;\n  //     const currentQuery = props.router.query;\n  //     currentQuery.page = page.selected + 1;\n  //\n  //     props.router.push({\n  //         pathname: currentPath,\n  //         query: currentQuery,\n  //     });\n  //\n  // };\n  //\n  // let content = null;\n  // if (isLoading)\n  //     content = <div>Loading...</div>;\n  // else {\n  //     //Generating posts list\n  //     content = (\n  //         <Main>\n  //             {(posts || []).map(post => (\n  //                 <PostPreview\n  //                     key={post.id}\n  //                     id={post.id}\n  //                     title={post.title}\n  //                     previewText={post.text}\n  //                     previewImage={post.image}\n  //                     lastEdit={new Date(post.created_at).toDateString()}\n  //                 />\n  //             ))}\n  //\n  //             <PageControls data={pageControls} active={currentPage}/>\n  //         </Main>\n  //     );\n  // }\n  //\n  // return (\n  //     <div className=\"container\">\n  //         <h1>Posts List with Pagination in Next.js</h1>\n  //         <div className=\"posts\">\n  //             {content}\n  //         </div>\n  //\n  //         <ReactPaginate\n  //             previousLabel={'previous'}\n  //             nextLabel={'next'}\n  //             breakLabel={'...'}\n  //             breakClassName={'break-me'}\n  //             activeClassName={'active'}\n  //             containerClassName={'pagination'}\n  //             subContainerClassName={'pages pagination'}\n  //\n  //             initialPage={props.currentPage - 1}\n  //             pageCount={props.pageCount}\n  //             marginPagesDisplayed={2}\n  //             pageRangeDisplayed={5}\n  //             onPageChange={pagginationHandler}\n  //         />\n  //     </div>\n  // );\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\n_c = Posts;\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, page, res, posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            console.log(query);\n            page = query.page || 1; //if page empty we request the first page\n\n            _context.next = 5;\n            return fetch(API_URL);\n\n          case 5:\n            res = _context.sent;\n            _context.next = 8;\n            return res.json();\n\n          case 8:\n            posts = _context.sent;\n            return _context.abrupt(\"return\", {\n              totalCount: 5,\n              pageCount: 2,\n              currentPage: 1,\n              perPage: 2,\n              posts: posts\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Posts); // export default Posts;\n//\n//\n// export async function getStaticProps() {\n//     try {\n//         const res = await fetch(API_URL)\n//         const posts = await res.json()\n//         return {\n//             props: {\n//                 posts,\n//             },\n//         }\n//     } catch (e) {\n//         console.log(e)\n//     }\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js"],"names":["React","useState","useEffect","caasy","Main","PostPreview","PageControls","blogConfig","utils","getAllPostIds","getPostData","API_URL","ReactPaginate","Router","withRouter","Posts","props","console","log","getInitialProps","query","page","fetch","res","json","posts","totalCount","pageCount","currentPage","perPage"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,mBAAzC;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,aAAnC;AAEA;;;;;;;;;AAQA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,KAAvB;AACA,SAAO,OAAP,CAFqB,CAIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA7ED,C,CAgFA;;;KAhFMD,K;;AAiFNA,KAAK,CAACI,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,QAASA,KAAT;AACpBH,YAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACMC,YAAAA,IAFc,GAEPD,KAAK,CAACC,IAAN,IAAc,CAFP,EAEU;;AAFV;AAAA,mBAGFC,KAAK,CAACX,OAAD,CAHH;;AAAA;AAGdY,YAAAA,GAHc;AAAA;AAAA,mBAIAA,GAAG,CAACC,IAAJ,EAJA;;AAAA;AAIdC,YAAAA,KAJc;AAAA,6CAKb;AACHC,cAAAA,UAAU,EAAE,CADT;AAEHC,cAAAA,SAAS,EAAE,CAFR;AAGHC,cAAAA,WAAW,EAAE,CAHV;AAIHC,cAAAA,OAAO,EAAE,CAJN;AAKHJ,cAAAA,KAAK,EAAEA;AALJ,aALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAeA,qBAAeX,UAAU,CAACC,KAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\n\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport {getAllPostIds, getPostData} from '../utils/getPosts'\nimport API_URL from \"../utils/http-utils\";\n\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\n\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\nconst Posts = (props) => {\n    console.log('#######', props)\n    return 'Hello'\n\n    // const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    // const startLoading = () => setLoading(true);\n    // const stopLoading = () => setLoading(false);\n    //\n    // useEffect(() => { //After the component is mounted set router event handlers\n    //     Router.events.on('routeChangeStart', startLoading);\n    //     Router.events.on('routeChangeComplete', stopLoading);\n    //\n    //     return () => {\n    //         Router.events.off('routeChangeStart', startLoading);\n    //         Router.events.off('routeChangeComplete', stopLoading);\n    //     }\n    // }, [])\n    //\n    // const pagginationHandler = (page) => {\n    //     const currentPath = props.router.pathname;\n    //     const currentQuery = props.router.query;\n    //     currentQuery.page = page.selected + 1;\n    //\n    //     props.router.push({\n    //         pathname: currentPath,\n    //         query: currentQuery,\n    //     });\n    //\n    // };\n    //\n    // let content = null;\n    // if (isLoading)\n    //     content = <div>Loading...</div>;\n    // else {\n    //     //Generating posts list\n    //     content = (\n    //         <Main>\n    //             {(posts || []).map(post => (\n    //                 <PostPreview\n    //                     key={post.id}\n    //                     id={post.id}\n    //                     title={post.title}\n    //                     previewText={post.text}\n    //                     previewImage={post.image}\n    //                     lastEdit={new Date(post.created_at).toDateString()}\n    //                 />\n    //             ))}\n    //\n    //             <PageControls data={pageControls} active={currentPage}/>\n    //         </Main>\n    //     );\n    // }\n    //\n    // return (\n    //     <div className=\"container\">\n    //         <h1>Posts List with Pagination in Next.js</h1>\n    //         <div className=\"posts\">\n    //             {content}\n    //         </div>\n    //\n    //         <ReactPaginate\n    //             previousLabel={'previous'}\n    //             nextLabel={'next'}\n    //             breakLabel={'...'}\n    //             breakClassName={'break-me'}\n    //             activeClassName={'active'}\n    //             containerClassName={'pagination'}\n    //             subContainerClassName={'pages pagination'}\n    //\n    //             initialPage={props.currentPage - 1}\n    //             pageCount={props.pageCount}\n    //             marginPagesDisplayed={2}\n    //             pageRangeDisplayed={5}\n    //             onPageChange={pagginationHandler}\n    //         />\n    //     </div>\n    // );\n};\n\n\n//Fetching posts in get Intial Props to make the app seo friendly\nPosts.getInitialProps = async ({ query }) => {\n    console.log(query)\n    const page = query.page || 1; //if page empty we request the first page\n    const res = await fetch(API_URL);\n    const posts = await res.json()\n    return {\n        totalCount: 5,\n        pageCount: 2,\n        currentPage: 1,\n        perPage: 2,\n        posts: posts,\n    };\n}\n\n\nexport default withRouter(Posts);\n\n// export default Posts;\n//\n//\n// export async function getStaticProps() {\n//     try {\n//         const res = await fetch(API_URL)\n//         const posts = await res.json()\n//         return {\n//             props: {\n//                 posts,\n//             },\n//         }\n//     } catch (e) {\n//         console.log(e)\n//     }\n// }\n"]},"metadata":{},"sourceType":"module"}