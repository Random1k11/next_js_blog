{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/blog_frontend_next_js/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\nvar Posts = function Posts(props) {\n  _s();\n\n  var posts = props.posts;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1]; //State for the loading indicator\n\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var paginationHandler = function paginationHandler(page) {\n    var currentPath = props.router.pathname;\n    var currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  var content;\n  if (isLoading) content = __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }\n  }, \"Loading...\");else {\n    //Generating posts list\n    content = (posts || []).map(function (post) {\n      return __jsx(PostPreview, {\n        key: post.id,\n        id: post.id,\n        title: post.title,\n        previewText: post.text,\n        previewImage: post.image,\n        lastEdit: new Date(post.updated_at).toDateString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      });\n    });\n  }\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(Main, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    className: \"posts-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \"Latest posts\"), __jsx(\"div\", {\n    className: \"posts\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, content, __jsx(\"div\", {\n    className: \"paginate-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, __jsx(ReactPaginate, {\n    previousLabel: 'previous',\n    nextLabel: 'next',\n    breakLabel: '...',\n    breakClassName: 'break-me',\n    activeClassName: 'active',\n    containerClassName: 'pagination',\n    subContainerClassName: 'pages pagination',\n    initialPage: props.currentPage - 1,\n    pageCount: props.pageCount,\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    onPageChange: paginationHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  })))));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\n_s(Posts, \"LHJkidtbt8bk0SOCXf2Y2viet6g=\");\n\n_c = Posts;\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, currentPage, perPage, pageOffset, url, res, posts, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            currentPage = query.page;\n            perPage = blogConfig.pagination.amountPostsOnPage;\n\n            if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n              pageOffset = 0;\n            } else {\n              pageOffset = parseInt(currentPage) * perPage - perPage;\n            }\n\n            url = API_URL + \"?limit=\".concat(perPage) + \"&offset=\".concat(pageOffset);\n            _context.next = 7;\n            return fetch(url);\n\n          case 7:\n            res = _context.sent;\n            _context.next = 10;\n            return res.json();\n\n          case 10:\n            posts = _context.sent;\n            pageCount = posts.count / perPage;\n            return _context.abrupt(\"return\", {\n              totalCount: posts.count,\n              pageCount: pageCount,\n              currentPage: currentPage,\n              perPage: perPage,\n              posts: posts.results\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Posts);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/blog_frontend_next_js/pages/index.js"],"names":["React","useState","useEffect","ReactPaginate","Router","withRouter","Main","PostPreview","API_URL","blogConfig","Posts","props","posts","isLoading","setLoading","startLoading","stopLoading","events","on","off","paginationHandler","page","currentPath","router","pathname","currentQuery","query","selected","push","content","map","post","id","title","text","image","Date","updated_at","toDateString","currentPage","pageCount","getInitialProps","perPage","pagination","amountPostsOnPage","pageOffset","parseInt","url","fetch","res","json","count","totalCount","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\n\nconst Posts = (props) => {\n    const posts = props.posts\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const paginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n    let content;\n    if (isLoading)\n        content = <div>Loading...</div>;\n    else {\n        //Generating posts list\n        content = (\n            (posts || []).map(post => (\n                <PostPreview\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    previewText={post.text}\n                    previewImage={post.image}\n                    lastEdit={new Date(post.updated_at).toDateString()}\n                />\n            ))\n        );\n    }\n\n    return (\n        <div className=\"container\">\n            <Main>\n                <h1 className=\"posts-title\">Latest posts</h1>\n                <div className=\"posts\">\n                    {content}\n                    <div className=\"paginate-container\">\n                        <ReactPaginate\n                            previousLabel={'previous'}\n                            nextLabel={'next'}\n                            breakLabel={'...'}\n                            breakClassName={'break-me'}\n                            activeClassName={'active'}\n                            containerClassName={'pagination'}\n                            subContainerClassName={'pages pagination'}\n                            initialPage={props.currentPage - 1}\n                            pageCount={props.pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={paginationHandler}\n                        />\n                    </div>\n                </div>\n            </Main>\n        </div>\n    );\n};\n\n\n//Fetching posts in get Intial Props to make the app seo friendly\nPosts.getInitialProps = async ({ query }) => {\n    const currentPage = query.page\n    const perPage = blogConfig.pagination.amountPostsOnPage\n\n    let pageOffset;\n    if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n        pageOffset = 0\n    } else {\n        pageOffset = parseInt(currentPage) * perPage - perPage\n    }\n    const url = API_URL + `?limit=${perPage}` + `&offset=${pageOffset}`\n    const res = await fetch(url);\n    const posts = await res.json()\n    const pageCount = posts.count / perPage\n\n    return {\n        totalCount: posts.count,\n        pageCount: pageCount,\n        currentPage: currentPage,\n        perPage: perPage,\n        posts: posts.results,\n    };\n}\n\n\nexport default withRouter(Posts);\n"]},"metadata":{},"sourceType":"module"}