{"ast":null,"code":"import Index from './';\nexport var __N_SSG = true;\nexport default Index;","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/[currentPage].js"],"names":["Index"],"mappings":"AAEA,OAAOA,KAAP,MAAsC,IAAtC;;AAIA,eAAeA,KAAf","sourcesContent":["import caasy from '@caasy/sdk-js';\n\nimport Index, { getStaticProps } from './';\n\nimport blogConfig from '../blogConfig';\n\nexport default Index;\nexport { getStaticProps };\n\n/**\n * Loads the first page of blog posts and uses the meta\n * data to calculate how many pages of posts there will\n * be in total. This is necessary to determine if there\n * is a previous and next page of blog posts.\n * @returns {Promise<{paths: [], fallback: boolean}>} props for each of the sites\n */\nexport const getStaticPaths = async () => {\n    // Usually, it's sufficient to initialize the Caasy SDK once\n    // in the entire app. However, when running \"next export\",\n    // this configuration is not persisted and therefore it is\n    // necessary to initialize the SDK every time before using it.\n    caasy.init(blogConfig.caasySDKConfig);\n    \n    // Fetches the first page of blog posts to use the metadata\n    const data = await caasy.posts.getAll();\n    \n    // Calculate how many pages of blog posts there are in total\n    const totalPages = Math.ceil((data.totalItems || 0) / data.itemsPerPage);\n    \n    // Prepare props for each of the site\n    const paths = [];\n    \n    for (let i = 0; i <= totalPages; i++) {\n        paths.push({\n            params: {\n                currentPage: i.toString()\n            }\n        });\n    }\n    \n    return {\n        fallback: false,\n        paths\n    };\n};"]},"metadata":{},"sourceType":"module"}