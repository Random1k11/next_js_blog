{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getAllPostIds, getPostData } from '../utils/getPosts';\nimport API_URL from \"../utils/http-utils\";\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nvar Posts = function Posts(_ref) {\n  var posts = _ref.posts,\n      pageControls = _ref.pageControls,\n      currentPage = _ref.currentPage;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1]; //State for the loading indicator\n\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var pagginationHandler = function pagginationHandler(page) {\n    var currentPath = props.router.pathname;\n    var currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  var content = null;\n  if (isLoading) content = __jsx(\"div\", null, \"Loading...\");else {\n    //Generating posts list\n    content = __jsx(Main, null, (posts || []).map(function (post) {\n      return __jsx(PostPreview, {\n        key: post.id,\n        id: post.id,\n        title: post.title,\n        previewText: post.text,\n        previewImage: post.image,\n        lastEdit: new Date(post.created_at).toDateString()\n      });\n    }), __jsx(PageControls, {\n      data: pageControls,\n      active: currentPage\n    }));\n  }\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"h1\", null, \"Posts List with Pagination in Next.js\"), __jsx(\"div\", {\n    className: \"posts\"\n  }, content), __jsx(ReactPaginate, {\n    previousLabel: 'previous',\n    nextLabel: 'next',\n    breakLabel: '...',\n    breakClassName: 'break-me',\n    activeClassName: 'active',\n    containerClassName: 'pagination',\n    subContainerClassName: 'pages pagination',\n    initialPage: props.currentPage - 1,\n    pageCount: props.pageCount,\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    onPageChange: pagginationHandler\n  }));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, page, res, posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n            page = query.page || 1; //if page empty we request the first page\n\n            _context.next = 4;\n            return fetch(API_URL);\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            posts = _context.sent;\n            return _context.abrupt(\"return\", {\n              totalCount: 5,\n              pageCount: 2,\n              currentPage: 1,\n              perPage: 2,\n              posts: posts\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default withRouter(Posts); // export default Posts;\n//\n//\n// export async function getStaticProps() {\n//     try {\n//         const res = await fetch(API_URL)\n//         const posts = await res.json()\n//         return {\n//             props: {\n//                 posts,\n//             },\n//         }\n//     } catch (e) {\n//         console.log(e)\n//     }\n// }","map":null,"metadata":{},"sourceType":"module"}