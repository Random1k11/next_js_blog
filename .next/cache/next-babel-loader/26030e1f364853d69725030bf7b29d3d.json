{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getAllPostIds, getPostData } from '../utils/getPosts';\nimport API_URL from \"../utils/http-utils\";\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nconst Posts = props => {\n  const posts = props.posts;\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false); //State for the loading indicator\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const paginationHandler = page => {\n    const currentPath = props.router.pathname;\n    const currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  const stopLoading_ = setLoading(true);\n  let content = null;\n  if (isLoading) content = __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  }, \"Loading...\");else {\n    //Generating posts list\n    content = __jsx(Main, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, (posts || []).map(post => 'dima' // <PostPreview\n    //     key={post.id}\n    //     id={post.id}\n    //     title={post.title}\n    //     previewText={post.text}\n    //     previewImage={post.image}\n    //     lastEdit={new Date(post.created_at).toDateString()}\n    // />\n    ));\n  }\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Posts List with Pagination in Next.js\"), __jsx(\"div\", {\n    className: \"posts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, content), __jsx(ReactPaginate, {\n    previousLabel: 'previous',\n    nextLabel: 'next',\n    breakLabel: '...',\n    breakClassName: 'break-me',\n    activeClassName: 'active',\n    containerClassName: 'pagination',\n    subContainerClassName: 'pages pagination',\n    initialPage: props.currentPage - 1,\n    pageCount: props.pageCount,\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    onPageChange: paginationHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\nPosts.getInitialProps = async ({\n  query\n}) => {\n  const page = query.page || 1; //if page empty we request the first page\n\n  const res = await fetch(API_URL);\n  const posts = await res.json();\n  return {\n    totalCount: 5,\n    pageCount: 2,\n    currentPage: 1,\n    perPage: 2,\n    posts: posts\n  };\n};\n\nexport default withRouter(Posts);","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js"],"names":["React","useState","useEffect","caasy","Main","PostPreview","PageControls","blogConfig","utils","getAllPostIds","getPostData","API_URL","ReactPaginate","Router","withRouter","Posts","props","posts","isLoading","setLoading","startLoading","stopLoading","events","on","off","paginationHandler","page","currentPath","router","pathname","currentQuery","query","selected","push","stopLoading_","content","map","post","currentPage","pageCount","getInitialProps","res","fetch","json","totalCount","perPage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\n\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport {getAllPostIds, getPostData} from '../utils/getPosts'\nimport API_URL from \"../utils/http-utils\";\n\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\n\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\nconst Posts = (props) => {\n    const posts = props.posts\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const paginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n    const stopLoading_ =setLoading(true);\n\n    let content = null;\n    if (isLoading)\n        content = <div>Loading...</div>;\n    else {\n        //Generating posts list\n        content = (\n            <Main>\n                {(posts || []).map(post => (\n                    'dima'\n                    // <PostPreview\n                    //     key={post.id}\n                    //     id={post.id}\n                    //     title={post.title}\n                    //     previewText={post.text}\n                    //     previewImage={post.image}\n                    //     lastEdit={new Date(post.created_at).toDateString()}\n                    // />\n                ))}\n\n            </Main>\n        );\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>Posts List with Pagination in Next.js</h1>\n            <div className=\"posts\">\n                {content}\n            </div>\n\n            <ReactPaginate\n                previousLabel={'previous'}\n                nextLabel={'next'}\n                breakLabel={'...'}\n                breakClassName={'break-me'}\n                activeClassName={'active'}\n                containerClassName={'pagination'}\n                subContainerClassName={'pages pagination'}\n                initialPage={props.currentPage - 1}\n                pageCount={props.pageCount}\n                marginPagesDisplayed={2}\n                pageRangeDisplayed={5}\n                onPageChange={paginationHandler}\n            />\n        </div>\n    );\n};\n\n\n//Fetching posts in get Intial Props to make the app seo friendly\nPosts.getInitialProps = async ({ query }) => {\n    const page = query.page || 1; //if page empty we request the first page\n    const res = await fetch(API_URL);\n    const posts = await res.json()\n    return {\n        totalCount: 5,\n        pageCount: 2,\n        currentPage: 1,\n        perPage: 2,\n        posts: posts,\n    };\n}\n\n\nexport default withRouter(Posts);\n"]},"metadata":{},"sourceType":"module"}