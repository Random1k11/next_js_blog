{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/next_js_blog/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\nvar Posts = function Posts(props) {\n  _s();\n\n  var posts = props.posts;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1]; //State for the loading indicator\n\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var paginationHandler = function paginationHandler(page) {\n    var currentPath = props.router.pathname;\n    var currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  var renderers = {\n    code: function code(_ref) {\n      var language = _ref.language,\n          value = _ref.value;\n      return __jsx(SyntaxHighlighter, {\n        language: language,\n        children: value,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 20\n        }\n      });\n    }\n  };\n  var content;\n\n  __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"centered content\"));\n\n  if (isLoading) content = __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Loading...\"));else {\n    //Generating posts list\n    console.log(posts);\n    content = (posts || []).map(function (post) {\n      return __jsx(PostPreview, {\n        key: post.slug,\n        slug: post.slug,\n        title: post.title,\n        previewText: __jsx(ReactMarkdown, {\n          renderers: renderers,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 33\n          }\n        }, post.text.slice(0, 500)),\n        previewImage: post.image,\n        lastEdit: new Date(post.updated_at).toDateString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      });\n    });\n  }\n  var paginate = null;\n\n  if (props.totalCount >= props.perPage) {\n    paginate = __jsx(\"div\", {\n      className: \"paginate-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 20\n      }\n    }, __jsx(ReactPaginate, {\n      previousLabel: 'previous',\n      nextLabel: 'next',\n      breakLabel: '...',\n      breakClassName: 'break-me',\n      activeClassName: 'active',\n      containerClassName: 'pagination',\n      subContainerClassName: 'pages pagination',\n      initialPage: props.currentPage - 1,\n      pageCount: props.pageCount,\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: paginationHandler,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }));\n  }\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, __jsx(Main, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"posts\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, content, paginate)));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\n_s(Posts, \"LHJkidtbt8bk0SOCXf2Y2viet6g=\");\n\n_c = Posts;\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, currentPage, perPage, pageOffset, url, res, posts, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n            currentPage = query.page;\n            perPage = blogConfig.pagination.amountPostsOnPage;\n\n            if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n              pageOffset = 0;\n            } else {\n              pageOffset = parseInt(currentPage) * perPage - perPage;\n            }\n\n            url = API_URL + \"?limit=\".concat(perPage) + \"&offset=\".concat(pageOffset);\n            _context.next = 7;\n            return fetch(url);\n\n          case 7:\n            res = _context.sent;\n            _context.next = 10;\n            return res.json();\n\n          case 10:\n            posts = _context.sent;\n            pageCount = posts.count / perPage;\n            return _context.abrupt(\"return\", {\n              totalCount: posts.count,\n              pageCount: pageCount,\n              currentPage: currentPage,\n              perPage: perPage,\n              posts: posts.results\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Posts);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/next_js_blog/pages/index.js"],"names":["React","useState","useEffect","ReactPaginate","Router","withRouter","ReactMarkdown","Prism","SyntaxHighlighter","Main","PostPreview","API_URL","blogConfig","Posts","props","posts","isLoading","setLoading","startLoading","stopLoading","events","on","off","paginationHandler","page","currentPath","router","pathname","currentQuery","query","selected","push","renderers","code","language","value","content","display","justifyContent","console","log","map","post","slug","title","text","slice","image","Date","updated_at","toDateString","paginate","totalCount","perPage","currentPage","pageCount","getInitialProps","pagination","amountPostsOnPage","pageOffset","parseInt","url","fetch","res","json","count","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\nimport ReactMarkdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\n\nconst Posts = (props) => {\n    const posts = props.posts\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const paginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n    const renderers = {\n        code: ({language, value}) => {\n            return <SyntaxHighlighter language={language} children={value} />\n        }\n    }\n    let content;\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n        <div>centered content</div>\n    </div>\n    if (isLoading)\n        content = <div style={{display: 'flex', justifyContent: 'center'}}>\n        <div>Loading...</div>\n    </div>;\n    else {\n        //Generating posts list\n        console.log(posts)\n        content = (\n            (posts || []).map(post => (\n                <PostPreview\n                    key={post.slug}\n                    slug={post.slug}\n                    title={post.title}\n                    previewText=<ReactMarkdown renderers={renderers}>{post.text.slice(0, 500)}</ReactMarkdown>\n                    previewImage={post.image}\n                    lastEdit={new Date(post.updated_at).toDateString()}\n                />\n            ))\n        );\n    }\n    let paginate = null\n    if (props.totalCount >= props.perPage) {  \n        paginate = <div className=\"paginate-container\">\n                        <ReactPaginate\n                            previousLabel={'previous'}\n                            nextLabel={'next'}\n                            breakLabel={'...'}\n                            breakClassName={'break-me'}\n                            activeClassName={'active'}\n                            containerClassName={'pagination'}\n                            subContainerClassName={'pages pagination'}\n                            initialPage={props.currentPage - 1}\n                            pageCount={props.pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={paginationHandler}\n                        />\n                    </div>\n    }\n\n    return (\n        <div className=\"container\">\n            <Main>\n                <div className=\"posts\">\n                    {content}\n                    {paginate}\n                </div>\n            </Main>\n        </div>\n    );\n};\n\n\n//Fetching posts in get Intial Props to make the app seo friendly\nPosts.getInitialProps = async ({ query }) => {\n    const currentPage = query.page\n    const perPage = blogConfig.pagination.amountPostsOnPage\n\n    let pageOffset;\n    if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n        pageOffset = 0\n    } else {\n        pageOffset = parseInt(currentPage) * perPage - perPage\n    }\n    const url = API_URL + `?limit=${perPage}` + `&offset=${pageOffset}`\n    const res = await fetch(url);\n    const posts = await res.json()\n    const pageCount = posts.count / perPage\n\n    return {\n        totalCount: posts.count,\n        pageCount: pageCount,\n        currentPage: currentPage,\n        perPage: perPage,\n        posts: posts.results,\n    };\n}\n\n\nexport default withRouter(Posts);\n"]},"metadata":{},"sourceType":"module"}