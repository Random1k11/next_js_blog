{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getAllPostIds, getPostData } from '../utils/getPosts';\nimport API_URL from \"../utils/http-utils\";\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nconst Posts = ({\n  posts,\n  pageControls,\n  currentPage\n}) => {\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false); //State for the loading indicator\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const pagginationHandler = page => {\n    const currentPath = props.router.pathname;\n    const currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  return __jsx(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, (posts || []).map(post => __jsx(PostPreview, {\n    key: post.id,\n    id: post.id,\n    title: post.title,\n    previewText: post.text,\n    previewImage: post.image,\n    lastEdit: new Date(post.created_at).toDateString(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  })), __jsx(PageControls, {\n    data: pageControls,\n    active: currentPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Posts;\nexport async function getStaticProps() {\n  try {\n    const res = await fetch(API_URL);\n    const posts = await res.json();\n    return {\n      props: {\n        posts\n      }\n    };\n  } catch (e) {\n    console.log(e);\n  }\n}","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js"],"names":["React","useState","useEffect","caasy","Main","PostPreview","PageControls","blogConfig","utils","getAllPostIds","getPostData","API_URL","ReactPaginate","Router","withRouter","Posts","posts","pageControls","currentPage","isLoading","setLoading","startLoading","stopLoading","events","on","off","pagginationHandler","page","currentPath","props","router","pathname","currentQuery","query","selected","push","map","post","id","title","text","image","Date","created_at","toDateString","getStaticProps","res","fetch","json","e","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\n\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport {getAllPostIds, getPostData} from '../utils/getPosts'\nimport API_URL from \"../utils/http-utils\";\n\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\n\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\nconst Posts = ({ posts, pageControls, currentPage }) => {\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const pagginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n\n    return (\n        <Main>\n            {(posts || []).map(post => (\n                <PostPreview\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    previewText={post.text}\n                    previewImage={post.image}\n                    lastEdit={new Date(post.created_at).toDateString()}\n                />\n            ))}\n\n            <PageControls data={pageControls} active={currentPage}/>\n        </Main>\n    )\n};\n\nexport default Posts;\n\n\nexport async function getStaticProps() {\n    try {\n        const res = await fetch(API_URL)\n        const posts = await res.json()\n        return {\n            props: {\n                posts,\n            },\n        }\n    } catch (e) {\n        console.log(e)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}