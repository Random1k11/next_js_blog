{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getAllPostIds, getPostData } from '../utils/getPosts';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nvar Posts = function Posts(_ref) {\n  _s();\n\n  var posts = _ref.posts,\n      pageControls = _ref.pageControls,\n      currentPage = _ref.currentPage;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1]; //State for the loading indicator\n\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var pagginationHandler = function pagginationHandler(page) {\n    var currentPath = props.router.pathname;\n    var currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  var content = null;\n  if (isLoading) content = __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }\n  }, \"Loading...\");\n  return __jsx(Main, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, (posts || []).map(function (post) {\n    return __jsx(PostPreview, {\n      key: post.id,\n      id: post.id,\n      title: post.title,\n      previewText: post.text,\n      previewImage: post.image,\n      lastEdit: new Date(post.created_at).toDateString(),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    });\n  }), __jsx(PageControls, {\n    data: pageControls,\n    active: currentPage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(Posts, \"LHJkidtbt8bk0SOCXf2Y2viet6g=\");\n\n_c = Posts;\nexport var __N_SSG = true;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js"],"names":["React","useState","useEffect","caasy","Main","PostPreview","PageControls","blogConfig","utils","getAllPostIds","getPostData","ReactPaginate","Router","withRouter","Posts","posts","pageControls","currentPage","isLoading","setLoading","startLoading","stopLoading","events","on","off","pagginationHandler","page","currentPath","props","router","pathname","currentQuery","query","selected","push","content","map","post","id","title","text","image","Date","created_at","toDateString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\n\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport {getAllPostIds, getPostData} from '../utils/getPosts'\nimport API_URL from \"../utils/http-utils\";\n\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\n\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\nconst Posts = ({ posts, pageControls, currentPage }) => {\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const pagginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n\n    let content = null;\n    if (isLoading)\n        content = <div>Loading...</div>;\n\n    return (\n        <Main>\n            {(posts || []).map(post => (\n                <PostPreview\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    previewText={post.text}\n                    previewImage={post.image}\n                    lastEdit={new Date(post.created_at).toDateString()}\n                />\n            ))}\n\n            <PageControls data={pageControls} active={currentPage}/>\n        </Main>\n    )\n};\n\nexport default Posts;\n\n\nexport async function getStaticProps() {\n    try {\n        const res = await fetch(API_URL)\n        const posts = await res.json()\n        return {\n            props: {\n                posts,\n            },\n        }\n    } catch (e) {\n        console.log(e)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}