{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/next_js_blog/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\nconst Posts = props => {\n  const posts = props.posts;\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false); //State for the loading indicator\n\n  const startLoading = () => setLoading(true);\n\n  const stopLoading = () => setLoading(false);\n\n  useEffect(() => {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  const paginationHandler = page => {\n    const currentPath = props.router.pathname;\n    const currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  let content;\n\n  __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"centered content\"));\n\n  if (isLoading) content = __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Loading...\"));else {\n    //Generating posts list\n    content = (posts || []).map(post => __jsx(PostPreview, {\n      key: post.id,\n      id: post.id,\n      title: post.title,\n      previewText: post.text,\n      previewImage: post.image,\n      lastEdit: new Date(post.updated_at).toDateString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }));\n  }\n  let paginate = null;\n\n  if (props.totalCount >= props.perPage) {\n    paginate = __jsx(\"div\", {\n      className: \"paginate-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 20\n      }\n    }, __jsx(ReactPaginate, {\n      previousLabel: 'previous',\n      nextLabel: 'next',\n      breakLabel: '...',\n      breakClassName: 'break-me',\n      activeClassName: 'active',\n      containerClassName: 'pagination',\n      subContainerClassName: 'pages pagination',\n      initialPage: props.currentPage - 1,\n      pageCount: props.pageCount,\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: paginationHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }));\n  }\n\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"posts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, __jsx(ReactMarkdown, {\n    renderers: renderers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, content), paginate)));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\nPosts.getInitialProps = async ({\n  query\n}) => {\n  const currentPage = query.page;\n  const perPage = blogConfig.pagination.amountPostsOnPage;\n  let pageOffset;\n\n  if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n    pageOffset = 0;\n  } else {\n    pageOffset = parseInt(currentPage) * perPage - perPage;\n  }\n\n  const url = API_URL + `?limit=${perPage}` + `&offset=${pageOffset}`;\n  const res = await fetch(url);\n  const posts = await res.json();\n  const pageCount = posts.count / perPage;\n  return {\n    totalCount: posts.count,\n    pageCount: pageCount,\n    currentPage: currentPage,\n    perPage: perPage,\n    posts: posts.results\n  };\n};\n\nexport default withRouter(Posts);","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/next_js_blog/pages/index.js"],"names":["React","useState","useEffect","ReactPaginate","Router","withRouter","ReactMarkdown","Prism","SyntaxHighlighter","Main","PostPreview","API_URL","blogConfig","Posts","props","posts","isLoading","setLoading","startLoading","stopLoading","events","on","off","paginationHandler","page","currentPath","router","pathname","currentQuery","query","selected","push","content","display","justifyContent","map","post","id","title","text","image","Date","updated_at","toDateString","paginate","totalCount","perPage","currentPage","pageCount","renderers","getInitialProps","pagination","amountPostsOnPage","pageOffset","parseInt","url","res","fetch","json","count","results"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\nimport ReactMarkdown from 'react-markdown'\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\n\nconst Posts = (props) => {\n    const posts = props.posts\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const paginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n    let content;\n    <div style={{display: 'flex', justifyContent: 'center'}}>\n        <div>centered content</div>\n    </div>\n    if (isLoading)\n        content = <div style={{display: 'flex', justifyContent: 'center'}}>\n        <div>Loading...</div>\n    </div>;\n    else {\n        //Generating posts list\n        content = (\n            (posts || []).map(post => (\n                <PostPreview\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    previewText={post.text}\n                    previewImage={post.image}\n                    lastEdit={new Date(post.updated_at).toDateString()}\n                />\n            ))\n        );\n    }\n    let paginate = null\n    if (props.totalCount >= props.perPage) {  \n        paginate = <div className=\"paginate-container\">\n                        <ReactPaginate\n                            previousLabel={'previous'}\n                            nextLabel={'next'}\n                            breakLabel={'...'}\n                            breakClassName={'break-me'}\n                            activeClassName={'active'}\n                            containerClassName={'pagination'}\n                            subContainerClassName={'pages pagination'}\n                            initialPage={props.currentPage - 1}\n                            pageCount={props.pageCount}\n                            marginPagesDisplayed={2}\n                            pageRangeDisplayed={5}\n                            onPageChange={paginationHandler}\n                        />\n                    </div>\n    }\n\n    return (\n        <div className=\"container\">\n            <Main>\n                <div className=\"posts\">\n                    <ReactMarkdown renderers={renderers}>{content}</ReactMarkdown>\n                    {paginate}\n                </div>\n            </Main>\n        </div>\n    );\n};\n\n\n//Fetching posts in get Intial Props to make the app seo friendly\nPosts.getInitialProps = async ({ query }) => {\n    const currentPage = query.page\n    const perPage = blogConfig.pagination.amountPostsOnPage\n\n    let pageOffset;\n    if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n        pageOffset = 0\n    } else {\n        pageOffset = parseInt(currentPage) * perPage - perPage\n    }\n    const url = API_URL + `?limit=${perPage}` + `&offset=${pageOffset}`\n    const res = await fetch(url);\n    const posts = await res.json()\n    const pageCount = posts.count / perPage\n\n    return {\n        totalCount: posts.count,\n        pageCount: pageCount,\n        currentPage: currentPage,\n        perPage: perPage,\n        posts: posts.results,\n    };\n}\n\n\nexport default withRouter(Posts);\n"]},"metadata":{},"sourceType":"module"}