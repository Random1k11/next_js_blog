{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getAllPostIds, getPostData } from '../utils/getPosts';\nimport API_URL from \"../utils/http-utils\";\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nvar Posts = function Posts(props) {\n  _s();\n\n  var posts = props.posts;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1]; //State for the loading indicator\n\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var paginationHandler = function paginationHandler(page) {\n    var currentPath = props.router.pathname;\n    var currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  var content;\n  if (isLoading) content = __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }\n  }, \"Loading...\");else {\n    //Generating posts list\n    content = (posts || []).map(function (post) {\n      return __jsx(PostPreview, {\n        key: post.id,\n        id: post.id,\n        title: post.title,\n        previewText: post.text,\n        previewImage: post.image,\n        lastEdit: new Date(post.created_at).toDateString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      });\n    });\n  }\n  return __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(Main, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Posts List with Pagination in Next.js\"), __jsx(\"div\", {\n    className: \"posts\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, content, __jsx(ReactPaginate, {\n    previousLabel: 'previous',\n    nextLabel: 'next',\n    breakLabel: '...',\n    breakClassName: 'break-me',\n    activeClassName: 'active',\n    containerClassName: 'pagination',\n    subContainerClassName: 'pages pagination',\n    initialPage: props.currentPage - 1,\n    pageCount: props.pageCount,\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    onPageChange: paginationHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }))));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\n_s(Posts, \"LHJkidtbt8bk0SOCXf2Y2viet6g=\");\n\n_c = Posts;\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, url, res, posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            url = API_URL + '?limit=10';\n            _context.next = 4;\n            return fetch(API_URL);\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            posts = _context.sent;\n            return _context.abrupt(\"return\", {\n              totalCount: 5,\n              pageCount: 2,\n              currentPage: 1,\n              perPage: 2,\n              posts: posts\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default _c2 = withRouter(Posts);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Posts\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js"],"names":["React","useState","useEffect","caasy","Main","PostPreview","PageControls","blogConfig","utils","getAllPostIds","getPostData","API_URL","ReactPaginate","Router","withRouter","Posts","props","posts","isLoading","setLoading","startLoading","stopLoading","events","on","off","paginationHandler","page","currentPath","router","pathname","currentQuery","query","selected","push","content","map","post","id","title","text","image","Date","created_at","toDateString","currentPage","pageCount","getInitialProps","url","fetch","res","json","totalCount","perPage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\n\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport {getAllPostIds, getPostData} from '../utils/getPosts'\nimport API_URL from \"../utils/http-utils\";\n\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router'\n\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\nconst Posts = (props) => {\n    const posts = props.posts\n\n    const [isLoading, setLoading] = useState(false); //State for the loading indicator\n    const startLoading = () => setLoading(true);\n    const stopLoading = () => setLoading(false);\n\n    useEffect(() => { //After the component is mounted set router event handlers\n        Router.events.on('routeChangeStart', startLoading);\n        Router.events.on('routeChangeComplete', stopLoading);\n\n        return () => {\n            Router.events.off('routeChangeStart', startLoading);\n            Router.events.off('routeChangeComplete', stopLoading);\n        }\n    }, [])\n\n    const paginationHandler = (page) => {\n        const currentPath = props.router.pathname;\n        const currentQuery = props.router.query;\n        currentQuery.page = page.selected + 1;\n\n        props.router.push({\n            pathname: currentPath,\n            query: currentQuery,\n        });\n\n    };\n\n    let content;\n    if (isLoading)\n        content = <div>Loading...</div>;\n    else {\n        //Generating posts list\n        content = (\n            (posts || []).map(post => (\n                <PostPreview\n                    key={post.id}\n                    id={post.id}\n                    title={post.title}\n                    previewText={post.text}\n                    previewImage={post.image}\n                    lastEdit={new Date(post.created_at).toDateString()}\n                />\n            ))\n        );\n    }\n\n    return (\n        <div className=\"container\">\n            <Main>\n                <h1>Posts List with Pagination in Next.js</h1>\n                <div className=\"posts\">\n                    {content}\n                    <ReactPaginate\n                        previousLabel={'previous'}\n                        nextLabel={'next'}\n                        breakLabel={'...'}\n                        breakClassName={'break-me'}\n                        activeClassName={'active'}\n                        containerClassName={'pagination'}\n                        subContainerClassName={'pages pagination'}\n                        initialPage={props.currentPage - 1}\n                        pageCount={props.pageCount}\n                        marginPagesDisplayed={2}\n                        pageRangeDisplayed={5}\n                        onPageChange={paginationHandler}\n                    />\n                </div>\n            </Main>\n        </div>\n    );\n};\n\n\n//Fetching posts in get Intial Props to make the app seo friendly\nPosts.getInitialProps = async ({ query }) => {\n    const url = API_URL + '?limit=10'\n\n    const res = await fetch(API_URL);\n    const posts = await res.json()\n    return {\n        totalCount: 5,\n        pageCount: 2,\n        currentPage: 1,\n        perPage: 2,\n        posts: posts,\n    };\n}\n\n\nexport default withRouter(Posts);\n"]},"metadata":{},"sourceType":"module"}