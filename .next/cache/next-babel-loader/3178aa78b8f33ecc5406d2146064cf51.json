{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/post/[id].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport caasy from '@caasy/sdk-js';\nimport BlogPost from '../../components/blogPost/BlogPost';\nimport blogConfig from '../../blogConfig';\n/**\n * Renders the blog post for the given data.\n * @param post\n * @returns {*}\n * @constructor\n */\n\nconst Post = post => __jsx(BlogPost, {\n  post: post,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 24\n  }\n});\n\nexport default Post;\n/**\n * Loads the blog post from Caasy.\n * @param ctx {object} context that contains the ID of the blog post that should be loaded\n * @returns {Promise<{props: *}>}\n */\n\nexport const getStaticProps = async ctx => {\n  // Determine the ID of the blog post\n  {\n    console.log(ctx, '@@@@@@@@@@@@@@@@');\n  }\n  const postId = ctx.params.id; // Fetch the blog post from Caasy\n\n  const post = await caasy.posts.getById(postId); // Pass the post data to the component\n\n  return {\n    props: post\n  };\n};\n/**\n * Determines all the paths for the blog posts.\n * @returns {Promise<{paths: {params: {id: *}}[], fallback: boolean}>}\n */\n\nexport const getStaticPaths = async () => {\n  // Usually, it's sufficient to initialize the Caasy SDK once\n  // in the entire app. However, when running \"next export\",\n  // this configuration is not persisted and therefore it is\n  // necessary to initialize the SDK every time before using it.\n  caasy.init(blogConfig.caasySDKConfig); // Fetch all blog post IDs\n\n  const allBlogPostIds = await caasy.posts.getAllIds(); // Get all IDs\n\n  const paths = allBlogPostIds.map(id => ({\n    params: {\n      id\n    }\n  }));\n  return {\n    fallback: false,\n    paths\n  };\n};","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/post/[id].js"],"names":["React","caasy","BlogPost","blogConfig","Post","post","getStaticProps","ctx","console","log","postId","params","id","posts","getById","props","getStaticPaths","init","caasySDKConfig","allBlogPostIds","getAllIds","paths","map","fallback"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,QAAP,MAAqB,oCAArB;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA;;;;;;;AAMA,MAAMC,IAAI,GAAIC,IAAD,IAAU,MAAC,QAAD;AAAU,EAAA,IAAI,EAAEA,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAvB;;AAEA,eAAeD,IAAf;AAEA;;;;;;AAKA,OAAO,MAAME,cAAc,GAAG,MAAOC,GAAP,IAAe;AACzC;AACA;AAACC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,kBAAjB;AAAqC;AACtC,QAAMG,MAAM,GAAGH,GAAG,CAACI,MAAJ,CAAWC,EAA1B,CAHyC,CAKzC;;AACA,QAAMP,IAAI,GAAG,MAAMJ,KAAK,CAACY,KAAN,CAAYC,OAAZ,CAAoBJ,MAApB,CAAnB,CANyC,CAQzC;;AACA,SAAO;AAAEK,IAAAA,KAAK,EAAEV;AAAT,GAAP;AACH,CAVM;AAaP;;;;;AAIA,OAAO,MAAMW,cAAc,GAAG,YAAY;AACtC;AACA;AACA;AACA;AACAf,EAAAA,KAAK,CAACgB,IAAN,CAAWd,UAAU,CAACe,cAAtB,EALsC,CAOtC;;AACA,QAAMC,cAAc,GAAG,MAAMlB,KAAK,CAACY,KAAN,CAAYO,SAAZ,EAA7B,CARsC,CAUtC;;AACA,QAAMC,KAAK,GAAGF,cAAc,CAACG,GAAf,CAAmBV,EAAE,KAAK;AAAED,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AAAV,GAAL,CAArB,CAAd;AAEA,SAAO;AACHW,IAAAA,QAAQ,EAAE,KADP;AAEHF,IAAAA;AAFG,GAAP;AAIH,CAjBM","sourcesContent":["import React from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport BlogPost from '../../components/blogPost/BlogPost';\n\nimport blogConfig from '../../blogConfig';\n\n/**\n * Renders the blog post for the given data.\n * @param post\n * @returns {*}\n * @constructor\n */\nconst Post = (post) => <BlogPost post={post} />;\n\nexport default Post;\n\n/**\n * Loads the blog post from Caasy.\n * @param ctx {object} context that contains the ID of the blog post that should be loaded\n * @returns {Promise<{props: *}>}\n */\nexport const getStaticProps = async (ctx) => {\n    // Determine the ID of the blog post\n    {console.log(ctx, '@@@@@@@@@@@@@@@@')}\n    const postId = ctx.params.id;\n\n    // Fetch the blog post from Caasy\n    const post = await caasy.posts.getById(postId);\n    \n    // Pass the post data to the component\n    return { props: post };\n};\n\n\n/**\n * Determines all the paths for the blog posts.\n * @returns {Promise<{paths: {params: {id: *}}[], fallback: boolean}>}\n */\nexport const getStaticPaths = async () => {\n    // Usually, it's sufficient to initialize the Caasy SDK once\n    // in the entire app. However, when running \"next export\",\n    // this configuration is not persisted and therefore it is\n    // necessary to initialize the SDK every time before using it.\n    caasy.init(blogConfig.caasySDKConfig);\n\n    // Fetch all blog post IDs\n    const allBlogPostIds = await caasy.posts.getAllIds();\n\n    // Get all IDs\n    const paths = allBlogPostIds.map(id => ({ params: { id } }));\n\n    return {\n        fallback: false,\n        paths\n    };\n};\n"]},"metadata":{},"sourceType":"module"}