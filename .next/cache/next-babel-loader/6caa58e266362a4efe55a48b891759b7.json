{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/components/elements/markdown/Markdown.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport hljs from 'highlight.js/lib/core'; //Highlight JS languages. Feel free to import them as required\n\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport xml from 'highlight.js/lib/languages/xml';\nimport css from 'highlight.js/lib/languages/css';\nimport DOMPurify from 'dompurify';\nimport marked from 'marked';\nimport blogConfig from '../../../blogConfig';\nimport styling from './Markdown.module.scss'; // Register Highlight.js languages\n\nhljs.registerLanguage('javascript', javascript);\nhljs.registerLanguage('xml', xml);\nhljs.registerLanguage('css', css);\n/**\n * Renders a markdown element as HTML.\n *\n * Caution: The HTML text is sanitized before it is rendered.\n *\n * @param text {string} markdown text\n * @returns {*}\n * @constructor\n */\n\nconst Markdown = ({\n  text\n}) => {\n  // State\n  const {\n    0: parsedMarkdown,\n    1: setParsedMarkdown\n  } = useState(''); // DOM node of the markdown container\n\n  const markdownContainer = useRef({});\n  /**\n   * Highlight the parsed markdown every time it changes.\n   */\n\n  useEffect(() => {\n    if (parsedMarkdown) {\n      markdownContainer.current.querySelectorAll('pre code').forEach(block => {\n        hljs.highlightBlock(block);\n      });\n    }\n  }, [parsedMarkdown]);\n  /**\n   * Parse and sanitize markdown text every time it changes,\n   */\n\n  useEffect(() => {\n    const html = marked(text[blogConfig.locale] || '');\n    const sanitized = DOMPurify.sanitize(html);\n    setParsedMarkdown(sanitized);\n  }, [text]);\n  return __jsx(\"div\", {\n    className: styling.markdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: parsedMarkdown\n    },\n    ref: markdownContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Markdown;","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/components/elements/markdown/Markdown.js"],"names":["React","useEffect","useRef","useState","hljs","javascript","xml","css","DOMPurify","marked","blogConfig","styling","registerLanguage","Markdown","text","parsedMarkdown","setParsedMarkdown","markdownContainer","current","querySelectorAll","forEach","block","highlightBlock","html","locale","sanitized","sanitize","markdown","__html"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,IAAP,MAAiB,uBAAjB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAOC,OAAP,MAAoB,wBAApB,C,CAEA;;AACAP,IAAI,CAACQ,gBAAL,CAAsB,YAAtB,EAAoCP,UAApC;AACAD,IAAI,CAACQ,gBAAL,CAAsB,KAAtB,EAA6BN,GAA7B;AACAF,IAAI,CAACQ,gBAAL,CAAsB,KAAtB,EAA6BL,GAA7B;AAEA;;;;;;;;;;AASA,MAAMM,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC3B;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAsCb,QAAQ,CAAC,EAAD,CAApD,CAF2B,CAK3B;;AACA,QAAMc,iBAAiB,GAAGf,MAAM,CAAC,EAAD,CAAhC;AAGA;;;;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,cAAJ,EAAoB;AAChBE,MAAAA,iBAAiB,CAACC,OAAlB,CAA0BC,gBAA1B,CAA2C,UAA3C,EAAuDC,OAAvD,CAA+DC,KAAK,IAAI;AACpEjB,QAAAA,IAAI,CAACkB,cAAL,CAAoBD,KAApB;AACH,OAFD;AAGH;AACJ,GANQ,EAMN,CAACN,cAAD,CANM,CAAT;AASA;;;;AAGAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMsB,IAAI,GAAId,MAAM,CAACK,IAAI,CAACJ,UAAU,CAACc,MAAZ,CAAJ,IAA2B,EAA5B,CAApB;AACA,UAAMC,SAAS,GAAGjB,SAAS,CAACkB,QAAV,CAAmBH,IAAnB,CAAlB;AAEAP,IAAAA,iBAAiB,CAACS,SAAD,CAAjB;AACH,GALQ,EAKN,CAACX,IAAD,CALM,CAAT;AAQA,SACI;AAAK,IAAA,SAAS,EAAEH,OAAO,CAACgB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,uBAAuB,EAAE;AAAEC,MAAAA,MAAM,EAAEb;AAAV,KAA9B;AAA0D,IAAA,GAAG,EAAEE,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CArCD;;AAuCA,eAAeJ,QAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport hljs from 'highlight.js/lib/core';\n\n//Highlight JS languages. Feel free to import them as required\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport xml from 'highlight.js/lib/languages/xml';\nimport css from 'highlight.js/lib/languages/css';\n\nimport DOMPurify from 'dompurify';\nimport marked from 'marked';\n\nimport blogConfig from '../../../blogConfig';\n\nimport styling from './Markdown.module.scss';\n\n// Register Highlight.js languages\nhljs.registerLanguage('javascript', javascript);\nhljs.registerLanguage('xml', xml);\nhljs.registerLanguage('css', css);\n\n/**\n * Renders a markdown element as HTML.\n *\n * Caution: The HTML text is sanitized before it is rendered.\n *\n * @param text {string} markdown text\n * @returns {*}\n * @constructor\n */\nconst Markdown = ({ text }) => {\n    // State\n    const [parsedMarkdown, setParsedMarkdown] = useState('');\n    \n    \n    // DOM node of the markdown container\n    const markdownContainer = useRef({});\n    \n    \n    /**\n     * Highlight the parsed markdown every time it changes.\n     */\n    useEffect(() => {\n        if (parsedMarkdown) {\n            markdownContainer.current.querySelectorAll('pre code').forEach(block => {\n                hljs.highlightBlock(block);\n            });\n        }\n    }, [parsedMarkdown]);\n    \n    \n    /**\n     * Parse and sanitize markdown text every time it changes,\n     */\n    useEffect(() => {\n        const html = (marked(text[blogConfig.locale] || ''));\n        const sanitized = DOMPurify.sanitize(html);\n        \n        setParsedMarkdown(sanitized);\n    }, [text]);\n    \n    \n    return (\n        <div className={styling.markdown}>\n            <div dangerouslySetInnerHTML={{ __html: parsedMarkdown }} ref={markdownContainer} />\n        </div>\n    );\n};\n\nexport default Markdown;"]},"metadata":{},"sourceType":"module"}