{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport ReactPaginate from 'react-paginate';\nimport Router, { withRouter } from 'next/router';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport API_URL from \"../utils/http-utils\";\nimport blogConfig from \"../blogConfig\";\n\nvar Posts = function Posts(props) {\n  var posts = props.posts;\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setLoading = _useState[1]; //State for the loading indicator\n\n\n  var startLoading = function startLoading() {\n    return setLoading(true);\n  };\n\n  var stopLoading = function stopLoading() {\n    return setLoading(false);\n  };\n\n  useEffect(function () {\n    //After the component is mounted set router event handlers\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    return function () {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n    };\n  }, []);\n\n  var paginationHandler = function paginationHandler(page) {\n    var currentPath = props.router.pathname;\n    var currentQuery = props.router.query;\n    currentQuery.page = page.selected + 1;\n    props.router.push({\n      pathname: currentPath,\n      query: currentQuery\n    });\n  };\n\n  var content;\n  if (isLoading) content = __jsx(\"div\", null, \"Loading...\");else {\n    //Generating posts list\n    content = (posts || []).map(function (post) {\n      return __jsx(PostPreview, {\n        key: post.id,\n        id: post.id,\n        title: post.title,\n        previewText: post.text,\n        previewImage: post.image,\n        lastEdit: new Date(post.updated_at).toDateString()\n      });\n    });\n  }\n  return __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(Main, null, __jsx(\"h1\", {\n    className: \"posts-title\"\n  }, \"Latest posts\"), __jsx(\"div\", {\n    className: \"posts\"\n  }, content, __jsx(\"div\", {\n    className: \"paginate-container\"\n  }, __jsx(ReactPaginate, {\n    previousLabel: 'previous',\n    nextLabel: 'next',\n    breakLabel: '...',\n    breakClassName: 'break-me',\n    activeClassName: 'active',\n    containerClassName: 'pagination',\n    subContainerClassName: 'pages pagination',\n    initialPage: props.currentPage - 1,\n    pageCount: props.pageCount,\n    marginPagesDisplayed: 2,\n    pageRangeDisplayed: 5,\n    onPageChange: paginationHandler\n  })))));\n}; //Fetching posts in get Intial Props to make the app seo friendly\n\n\nPosts.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, currentPage, perPage, pageOffset, url, res, posts, pageCount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            currentPage = query.page;\n            perPage = blogConfig.pagination.amountPostsOnPage;\n\n            if (currentPage === '0' || currentPage === '1' || currentPage == null) {\n              pageOffset = 0;\n            } else {\n              pageOffset = parseInt(currentPage) * perPage - perPage;\n            }\n\n            url = API_URL + \"?limit=\".concat(perPage) + \"&offset=\".concat(pageOffset);\n            _context.next = 7;\n            return fetch(url);\n\n          case 7:\n            res = _context.sent;\n            _context.next = 10;\n            return res.json();\n\n          case 10:\n            posts = _context.sent;\n            pageCount = posts.count / perPage;\n            return _context.abrupt(\"return\", {\n              totalCount: posts.count,\n              pageCount: pageCount,\n              currentPage: currentPage,\n              perPage: perPage,\n              posts: posts.results\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default withRouter(Posts);","map":null,"metadata":{},"sourceType":"module"}