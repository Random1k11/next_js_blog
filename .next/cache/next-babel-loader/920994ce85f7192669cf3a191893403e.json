{"ast":null,"code":"var _jsxFileName = \"/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport caasy from '@caasy/sdk-js';\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport { getPostData } from '../utils/getPosts';\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\n\nconst Posts = ({\n  posts,\n  pageControls,\n  currentPage\n}) => __jsx(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }\n}, console.log(posts), (posts || []).map(post => {\n  var _post$previewImageUrl;\n\n  return __jsx(PostPreview, {\n    key: post.id,\n    id: post.id,\n    title: post.title,\n    previewText: post.description,\n    previewImage: (post === null || post === void 0 ? void 0 : (_post$previewImageUrl = post.previewImageUrls) === null || _post$previewImageUrl === void 0 ? void 0 : _post$previewImageUrl.medium) || '',\n    lastEdit: post.updatedAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  });\n}), __jsx(PageControls, {\n  data: pageControls,\n  active: currentPage,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }\n}));\n\nexport default Posts;\n/**\n * Fetches all blog posts for the current page\n * number and calculates the navigation.\n * @param ctx\n * @returns {Promise<{props: {pageControls: (*|*[]), currentPage: number, posts: (*|*[])}}>} posts, page controls and page number\n */\n\nexport const getStaticProps = async ctx => {\n  // Usually, it's sufficient to initialize the Caasy SDK once\n  // in the entire app. However, when running \"next export\",\n  // this configuration is not persisted and therefore it is\n  // necessary to initialize the SDK every time before using it.\n  caasy.init(blogConfig.caasySDKConfig); // Pass the posts, page controls and the active page number to the component\n\n  return {\n    props: {\n      posts: posts.data || [],\n      pageControls,\n      currentPage\n    }\n  };\n};","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/index.js"],"names":["React","caasy","Main","PostPreview","PageControls","blogConfig","utils","getPostData","Posts","posts","pageControls","currentPage","console","log","map","post","id","title","description","previewImageUrls","medium","updatedAt","getStaticProps","ctx","init","caasySDKConfig","props","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,IAAP,MAAiB,gCAAjB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,SAAQC,WAAR,QAA0B,mBAA1B;AAEA;;;;;;;;;AAQA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,YAAT;AAAuBC,EAAAA;AAAvB,CAAD,KACV,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKC,OAAO,CAACC,GAAR,CAAYJ,KAAZ,CADL,EAEK,CAACA,KAAK,IAAI,EAAV,EAAcK,GAAd,CAAkBC,IAAI;AAAA;;AAAA,SACnB,MAAC,WAAD;AACI,IAAA,GAAG,EAAEA,IAAI,CAACC,EADd;AAEI,IAAA,EAAE,EAAED,IAAI,CAACC,EAFb;AAGI,IAAA,KAAK,EAAED,IAAI,CAACE,KAHhB;AAII,IAAA,WAAW,EAAEF,IAAI,CAACG,WAJtB;AAKI,IAAA,YAAY,EAAE,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,qCAAAA,IAAI,CAAEI,gBAAN,gFAAwBC,MAAxB,KAAkC,EALpD;AAMI,IAAA,QAAQ,EAAEL,IAAI,CAACM,SANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADmB;AAAA,CAAtB,CAFL,EAaI,MAAC,YAAD;AAAc,EAAA,IAAI,EAAEX,YAApB;AAAkC,EAAA,MAAM,EAAEC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAbJ,CADJ;;AAkBA,eAAeH,KAAf;AAEA;;;;;;;AAMA,OAAO,MAAMc,cAAc,GAAG,MAAOC,GAAP,IAAe;AACzC;AACA;AACA;AACA;AACAtB,EAAAA,KAAK,CAACuB,IAAN,CAAWnB,UAAU,CAACoB,cAAtB,EALyC,CAQzC;;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAEjB,MAAAA,KAAK,EAAEA,KAAK,CAACkB,IAAN,IAAc,EAAvB;AAA2BjB,MAAAA,YAA3B;AAAyCC,MAAAA;AAAzC;AAAT,GAAP;AACH,CAVM","sourcesContent":["import React from 'react';\nimport caasy from '@caasy/sdk-js';\n\nimport Main from '../components/layout/main/Main';\nimport PostPreview from '../components/postPreview/PostPreview';\nimport PageControls from '../components/pageControls/PageControls';\n\nimport blogConfig from '../blogConfig';\nimport utils from '../utils/';\nimport {getPostData} from '../utils/getPosts'\n\n/**\n * Displays all blog posts for a given page number.\n * @param posts {array} all blog posts for the given page\n * @param pageControls {array} contains the pages for the navigation\n * @param currentPage {number} number of the active page\n * @returns {*}\n * @constructor\n */\nconst Posts = ({ posts, pageControls, currentPage }) => (\n    <Main>\n        {console.log(posts)}\n        {(posts || []).map(post => (\n            <PostPreview\n                key={post.id}\n                id={post.id}\n                title={post.title}\n                previewText={post.description}\n                previewImage={post?.previewImageUrls?.medium || ''}\n                lastEdit={post.updatedAt}\n            />\n        ))}\n\n        <PageControls data={pageControls} active={currentPage} />\n    </Main>\n);\n\nexport default Posts;\n\n/**\n * Fetches all blog posts for the current page\n * number and calculates the navigation.\n * @param ctx\n * @returns {Promise<{props: {pageControls: (*|*[]), currentPage: number, posts: (*|*[])}}>} posts, page controls and page number\n */\nexport const getStaticProps = async (ctx) => {\n    // Usually, it's sufficient to initialize the Caasy SDK once\n    // in the entire app. However, when running \"next export\",\n    // this configuration is not persisted and therefore it is\n    // necessary to initialize the SDK every time before using it.\n    caasy.init(blogConfig.caasySDKConfig);\n\n\n    // Pass the posts, page controls and the active page number to the component\n    return { props: { posts: posts.data || [], pageControls, currentPage } };\n};\n"]},"metadata":{},"sourceType":"module"}