{"ast":null,"code":"import caasy from '@caasy/sdk-js';\nimport Index, { getStaticProps } from './';\nimport blogConfig from '../blogConfig';\nexport default Index;\nexport { getStaticProps };\n/**\n * Loads the first page of blog posts and uses the meta\n * data to calculate how many pages of posts there will\n * be in total. This is necessary to determine if there\n * is a previous and next page of blog posts.\n * @returns {Promise<{paths: [], fallback: boolean}>} props for each of the sites\n */\n\nexport const getStaticPaths = async () => {\n  // Usually, it's sufficient to initialize the Caasy SDK once\n  // in the entire app. However, when running \"next export\",\n  // this configuration is not persisted and therefore it is\n  // necessary to initialize the SDK every time before using it.\n  caasy.init(blogConfig.caasySDKConfig); // Fetches the first page of blog posts to use the metadata\n\n  const data = await caasy.posts.getAll(); // Calculate how many pages of blog posts there are in total\n\n  const totalPages = Math.ceil((data.totalItems || 0) / data.itemsPerPage); // Prepare props for each of the site\n\n  const paths = [];\n\n  for (let i = 0; i <= totalPages; i++) {\n    paths.push({\n      params: {\n        currentPage: i.toString()\n      }\n    });\n  }\n\n  return {\n    fallback: false,\n    paths\n  };\n};","map":{"version":3,"sources":["/home/dima/Desktop/learning/dj-blog/caasy-nextjs-blog-template/pages/[currentPage].js"],"names":["caasy","Index","getStaticProps","blogConfig","getStaticPaths","init","caasySDKConfig","data","posts","getAll","totalPages","Math","ceil","totalItems","itemsPerPage","paths","i","push","params","currentPage","toString","fallback"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AAEA,OAAOC,KAAP,IAAgBC,cAAhB,QAAsC,IAAtC;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,eAAeF,KAAf;AACA,SAASC,cAAT;AAEA;;;;;;;;AAOA,OAAO,MAAME,cAAc,GAAG,YAAY;AACtC;AACA;AACA;AACA;AACAJ,EAAAA,KAAK,CAACK,IAAN,CAAWF,UAAU,CAACG,cAAtB,EALsC,CAOtC;;AACA,QAAMC,IAAI,GAAG,MAAMP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,EAAnB,CARsC,CAUtC;;AACA,QAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAU,CAACL,IAAI,CAACM,UAAL,IAAmB,CAApB,IAAyBN,IAAI,CAACO,YAAxC,CAAnB,CAXsC,CAatC;;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,UAArB,EAAiCM,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAW;AACPC,MAAAA,MAAM,EAAE;AACJC,QAAAA,WAAW,EAAEH,CAAC,CAACI,QAAF;AADT;AADD,KAAX;AAKH;;AAED,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHN,IAAAA;AAFG,GAAP;AAIH,CA5BM","sourcesContent":["import caasy from '@caasy/sdk-js';\n\nimport Index, { getStaticProps } from './';\n\nimport blogConfig from '../blogConfig';\n\nexport default Index;\nexport { getStaticProps };\n\n/**\n * Loads the first page of blog posts and uses the meta\n * data to calculate how many pages of posts there will\n * be in total. This is necessary to determine if there\n * is a previous and next page of blog posts.\n * @returns {Promise<{paths: [], fallback: boolean}>} props for each of the sites\n */\nexport const getStaticPaths = async () => {\n    // Usually, it's sufficient to initialize the Caasy SDK once\n    // in the entire app. However, when running \"next export\",\n    // this configuration is not persisted and therefore it is\n    // necessary to initialize the SDK every time before using it.\n    caasy.init(blogConfig.caasySDKConfig);\n    \n    // Fetches the first page of blog posts to use the metadata\n    const data = await caasy.posts.getAll();\n    \n    // Calculate how many pages of blog posts there are in total\n    const totalPages = Math.ceil((data.totalItems || 0) / data.itemsPerPage);\n    \n    // Prepare props for each of the site\n    const paths = [];\n    \n    for (let i = 0; i <= totalPages; i++) {\n        paths.push({\n            params: {\n                currentPage: i.toString()\n            }\n        });\n    }\n    \n    return {\n        fallback: false,\n        paths\n    };\n};"]},"metadata":{},"sourceType":"module"}